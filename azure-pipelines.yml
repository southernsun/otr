# Build and test .NET Core projects
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: techtalk.techtalk-specflow-plus.specflow-plus.SpecFlowPlus@0
  inputs:
    projectFilePath: Tests/SpecFlow.Plus.Runner.Specs/Features
    projectName: testName
    projectLanguage: en
    workItemPrefix: testPrefix
  enabled: false
  continueOnError: true
  condition: always()
  timeoutInMinutes: 10
  displayName: 'SpecFlow+ build step SpecFlow.Plus.Runner.Specs'

- script: dotnet build OffTheRecord/OffTheRecord.sln --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- script: 'dotnet test OffTheRecord/OffTheRecord.sln --logger "trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/Coverage/'
  displayName: 'Running Tests and collect Code Coverage'

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path $(Build.SourcesDirectory) dotnet-reportgenerator-globaltool
  displayName: Install ReportGenerator tool  

- script: $(Build.SourcesDirectory)/reportgenerator "-reports:$(Build.SourcesDirectory)/OffTheRecord/AlgoLibrary.Tests/TestResults/Coverage/coverage.cobertura.xml" "-targetDir:$(Build.SourcesDirectory)/OffTheRecord/AlgoLibrary.Tests/TestResults/Coverage/Reports" -tag:$(Build.BuildNumber) -reportTypes:htmlInline
  workingDirectory: $(Build.SourcesDirectory)/OffTheRecord/AlgoLibrary.Tests
  displayName: 'dotnet reportgenerator'

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true
